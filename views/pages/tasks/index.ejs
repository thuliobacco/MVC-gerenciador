<div class="mb-8">
    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
            <h1 class="text-3xl font-bold text-gray-900">Gerenciar Tarefas</h1>
            <p class="text-gray-600 mt-1">Visualize e gerencie todas as suas tarefas</p>
        </div>
        <div class="flex space-x-3">
            <button onclick="refreshTasks()" class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors">
                <i class="fas fa-refresh mr-2"></i>Atualizar
            </button>
            <a href="/tasks/create" class="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors">
                <i class="fas fa-plus mr-2"></i>Nova Tarefa
            </a>
        </div>
    </div>
</div>

<!-- Filters and Search -->
<div class="bg-white rounded-lg shadow-md p-6 mb-6">
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Buscar Tarefas</label>
            <div class="relative">
                <input type="text" id="search-tasks" placeholder="Digite para buscar..." 
                       class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500">
                <i class="fas fa-search absolute left-3 top-3 text-gray-400"></i>
            </div>
        </div>
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Filtrar por Categoria</label>
            <select id="filter-category" class="w-full py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500">
                <option value="">Todas as categorias</option>
            </select>
        </div>
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Filtrar por Status</label>
            <select id="filter-status" class="w-full py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500">
                <option value="">Todos os status</option>
                <option value="pending">Pendente</option>
                <option value="in_progress">Em Progresso</option>
                <option value="completed">Concluída</option>
            </select>
        </div>
    </div>
</div>

<!-- Tasks List -->
<div class="bg-white rounded-lg shadow-md">
    <div class="p-6 border-b border-gray-200">
        <div class="flex justify-between items-center">
            <h2 class="text-xl font-semibold text-gray-900">
                <i class="fas fa-list mr-2 text-indigo-500"></i>
                Lista de Tarefas
            </h2>
            <span id="tasks-count" class="text-sm text-gray-500">Carregando...</span>
        </div>
    </div>
    
    <div id="tasks-container" class="p-6">
        <!-- Loading State -->
        <div id="loading-tasks" class="text-center py-12">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto mb-4"></div>
            <p class="text-gray-500">Carregando tarefas...</p>
        </div>
        
        <!-- Tasks will be loaded here -->
        <div id="tasks-list" class="hidden space-y-4"></div>
        
        <!-- Empty State -->
        <div id="empty-tasks" class="hidden text-center py-12">
            <i class="fas fa-inbox text-gray-300 text-6xl mb-4"></i>
            <h3 class="text-xl font-semibold text-gray-500 mb-2">Nenhuma tarefa encontrada</h3>
            <p class="text-gray-400 mb-6">Comece criando sua primeira tarefa</p>
            <a href="/tasks/create" class="bg-indigo-600 text-white px-6 py-3 rounded-lg hover:bg-indigo-700 transition-colors">
                <i class="fas fa-plus mr-2"></i>Criar Primeira Tarefa
            </a>
        </div>
    </div>
</div>

<!-- Task Actions Modal -->
<div id="task-actions-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white rounded-lg shadow-lg max-w-md w-full mx-4">
        <div class="p-6">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold">Ações da Tarefa</h3>
                <button onclick="closeTaskActionsModal()" class="text-gray-400 hover:text-gray-600">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="space-y-2">
                <button onclick="viewTask()" class="w-full text-left px-4 py-2 hover:bg-gray-100 rounded-lg transition-colors">
                    <i class="fas fa-eye mr-2 text-blue-500"></i>Visualizar Detalhes
                </button>
                <button onclick="editTask()" class="w-full text-left px-4 py-2 hover:bg-gray-100 rounded-lg transition-colors">
                    <i class="fas fa-edit mr-2 text-green-500"></i>Editar Tarefa
                </button>
                <button onclick="assignUsers()" class="w-full text-left px-4 py-2 hover:bg-gray-100 rounded-lg transition-colors">
                    <i class="fas fa-users mr-2 text-purple-500"></i>Atribuir Usuários
                </button>
                <button onclick="deleteTask()" class="w-full text-left px-4 py-2 hover:bg-gray-100 rounded-lg transition-colors">
                    <i class="fas fa-trash mr-2 text-red-500"></i>Excluir Tarefa
                </button>
            </div>
        </div>
    </div>
</div>

<script>
// Tasks management JavaScript
let allTasks = [];
let allCategories = [];
let currentTaskId = null;

document.addEventListener('DOMContentLoaded', function() {
    loadTasks();
    loadCategories();
    setupEventListeners();
});

function setupEventListeners() {
    // Search functionality
    document.getElementById('search-tasks').addEventListener('input', filterTasks);
    document.getElementById('filter-category').addEventListener('change', filterTasks);
    document.getElementById('filter-status').addEventListener('change', filterTasks);
}

async function loadTasks() {
    try {
        document.getElementById('loading-tasks').classList.remove('hidden');
        document.getElementById('tasks-list').classList.add('hidden');
        document.getElementById('empty-tasks').classList.add('hidden');
        
        const response = await apiRequest('/tasks');
        allTasks = response;
        
        if (allTasks.length === 0) {
            document.getElementById('loading-tasks').classList.add('hidden');
            document.getElementById('empty-tasks').classList.remove('hidden');
        } else {
            displayTasks(allTasks);
        }
        
        updateTasksCount(allTasks.length);
    } catch (error) {
        console.error('Error loading tasks:', error);
        showFlashMessage('Erro ao carregar tarefas', 'error');
        document.getElementById('loading-tasks').classList.add('hidden');
    }
}

async function loadCategories() {
    try {
        const response = await apiRequest('/categories');
        allCategories = response;
        
        const categorySelect = document.getElementById('filter-category');
        categorySelect.innerHTML = '<option value="">Todas as categorias</option>';
        
        allCategories.forEach(category => {
            const option = document.createElement('option');
            option.value = category.id;
            option.textContent = category.name;
            categorySelect.appendChild(option);
        });
    } catch (error) {
        console.error('Error loading categories:', error);
    }
}

function displayTasks(tasks) {
    const container = document.getElementById('tasks-list');
    const loadingElement = document.getElementById('loading-tasks');
    const emptyElement = document.getElementById('empty-tasks');
    
    if (tasks.length === 0) {
        container.classList.add('hidden');
        loadingElement.classList.add('hidden');
        emptyElement.classList.remove('hidden');
        return;
    }
    
    loadingElement.classList.add('hidden');
    emptyElement.classList.add('hidden');
    container.classList.remove('hidden');
    
    container.innerHTML = tasks.map(task => createTaskCard(task)).join('');
}

function createTaskCard(task) {
    const statusColors = {
        'pending': 'bg-yellow-100 text-yellow-800',
        'in_progress': 'bg-blue-100 text-blue-800',
        'completed': 'bg-green-100 text-green-800'
    };
    
    const statusLabels = {
        'pending': 'Pendente',
        'in_progress': 'Em Progresso',
        'completed': 'Concluída'
    };
    
    const priorityColors = {
        'low': 'text-green-600',
        'medium': 'text-yellow-600',
        'high': 'text-red-600'
    };
    
    const priorityLabels = {
        'low': 'Baixa',
        'medium': 'Média',
        'high': 'Alta'
    };
    
    return `
        <div class="border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow">
            <div class="flex justify-between items-start mb-4">
                <div class="flex-1">
                    <h3 class="text-lg font-semibold text-gray-900 mb-2">${task.title}</h3>
                    <p class="text-gray-600 mb-3">${task.description || 'Sem descrição'}</p>
                    
                    <div class="flex flex-wrap gap-2 mb-3">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${statusColors[task.status] || statusColors.pending}">
                            ${statusLabels[task.status] || 'Pendente'}
                        </span>
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                            Prioridade: <span class="${priorityColors[task.priority] || priorityColors.medium} ml-1 font-semibold">
                                ${priorityLabels[task.priority] || 'Média'}
                            </span>
                        </span>
                    </div>
                    
                    ${task.due_date ? `
                        <div class="flex items-center text-sm text-gray-500 mb-2">
                            <i class="fas fa-calendar mr-2"></i>
                            Prazo: ${new Date(task.due_date).toLocaleDateString()}
                        </div>
                    ` : ''}
                    
                    <div class="flex items-center text-sm text-gray-500">
                        <i class="fas fa-clock mr-2"></i>
                        Criado em: ${new Date(task.created_at).toLocaleDateString()}
                    </div>
                </div>
                
                <div class="flex flex-col space-y-2 ml-4">
                    <button onclick="openTaskActions(${task.id})" 
                            class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-3 py-2 rounded-lg transition-colors">
                        <i class="fas fa-ellipsis-v"></i>
                    </button>
                </div>
            </div>
        </div>
    `;
}

function filterTasks() {
    const searchTerm = document.getElementById('search-tasks').value.toLowerCase();
    const categoryFilter = document.getElementById('filter-category').value;
    const statusFilter = document.getElementById('filter-status').value;
    
    let filteredTasks = allTasks.filter(task => {
        const matchesSearch = task.title.toLowerCase().includes(searchTerm) ||
                            (task.description && task.description.toLowerCase().includes(searchTerm));
        const matchesCategory = !categoryFilter || task.category_id == categoryFilter;
        const matchesStatus = !statusFilter || task.status === statusFilter;
        
        return matchesSearch && matchesCategory && matchesStatus;
    });
    
    displayTasks(filteredTasks);
    updateTasksCount(filteredTasks.length);
}

function updateTasksCount(count) {
    document.getElementById('tasks-count').textContent = `${count} tarefa(s) encontrada(s)`;
}

function openTaskActions(taskId) {
    currentTaskId = taskId;
    document.getElementById('task-actions-modal').classList.remove('hidden');
}

function closeTaskActionsModal() {
    document.getElementById('task-actions-modal').classList.add('hidden');
    currentTaskId = null;
}

function viewTask() {
    if (currentTaskId) {
        window.location.href = `/tasks/${currentTaskId}`;
    }
    closeTaskActionsModal();
}

function editTask() {
    if (currentTaskId) {
        window.location.href = `/tasks/${currentTaskId}/edit`;
    }
    closeTaskActionsModal();
}

function assignUsers() {
    if (currentTaskId) {
        // Implementar modal de atribuição de usuários
        showFlashMessage('Funcionalidade de atribuição em desenvolvimento', 'info');
    }
    closeTaskActionsModal();
}

function deleteTask() {
    if (currentTaskId) {
        const task = allTasks.find(t => t.id === currentTaskId);
        showConfirmModal(
            `Tem certeza que deseja excluir a tarefa "${task.title}"?`,
            async () => {
                try {
                    await apiRequest(`/tasks/${currentTaskId}`, { method: 'DELETE' });
                    showFlashMessage('Tarefa excluída com sucesso!', 'success');
                    loadTasks();
                } catch (error) {
                    console.error('Error deleting task:', error);
                    showFlashMessage('Erro ao excluir tarefa', 'error');
                }
            }
        );
    }
    closeTaskActionsModal();
}

async function refreshTasks() {
    await loadTasks();
    showFlashMessage('Lista de tarefas atualizada!', 'success');
}

// Close modal when clicking outside
document.getElementById('task-actions-modal').addEventListener('click', function(e) {
    if (e.target === this) {
        closeTaskActionsModal();
    }
});
</script>