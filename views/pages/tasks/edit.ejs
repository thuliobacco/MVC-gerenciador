<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editar Tarefa</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body class="bg-gray-50 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <div class="mb-8">
            <div class="flex items-center space-x-4">
                <a href="/tasks" class="text-indigo-600 hover:text-indigo-800 transition-colors">
                    <i class="fas fa-arrow-left text-xl"></i>
                </a>
                <div class="flex-1">
                    <h1 class="text-3xl font-bold text-gray-900">Editar Tarefa</h1>
                    <p class="text-gray-600 mt-1">Modifique os dados da tarefa</p>
                </div>
                <div class="flex space-x-2">
                    <button id="delete-task-btn" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
                        <i class="fas fa-trash mr-2"></i>
                        Excluir
                    </button>
                </div>
            </div>
        </div>

        <!-- Edit Task Form -->
        <div class="max-w-4xl mx-auto">
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <div class="p-6 border-b border-gray-200">
                    <div class="flex items-center justify-between">
                        <h2 class="text-xl font-semibold text-gray-900">
                            <i class="fas fa-edit mr-2 text-indigo-500"></i>
                            Informações da Tarefa
                        </h2>
                        <div class="flex items-center space-x-2 text-sm text-gray-500">
                            <i class="fas fa-clock"></i>
                            <span>Criada em: <span id="created-date">--</span></span>
                        </div>
                    </div>
                </div>
                
                <form id="edit-task-form" class="p-6 space-y-6">
                    <input type="hidden" id="task-id" name="id">
                    
                    <!-- Title -->
                    <div>
                        <label for="title" class="block text-sm font-medium text-gray-700 mb-2">
                            Título da Tarefa <span class="text-red-500">*</span>
                        </label>
                        <input type="text" id="title" name="title" required
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
                               placeholder="Digite o título da tarefa">
                        <div class="invalid-feedback hidden text-red-500 text-sm mt-1"></div>
                    </div>
                    
                    <!-- Description -->
                    <div>
                        <label for="description" class="block text-sm font-medium text-gray-700 mb-2">
                            Descrição
                        </label>
                        <textarea id="description" name="description" rows="4"
                                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
                                  placeholder="Descreva os detalhes da tarefa"></textarea>
                        <div class="invalid-feedback hidden text-red-500 text-sm mt-1"></div>
                    </div>
                    
                    <!-- Row with Category, Priority, and Status -->
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <!-- Category -->
                        <div>
                            <label for="category_id" class="block text-sm font-medium text-gray-700 mb-2">
                                Categoria
                            </label>
                            <select id="category_id" name="category_id"
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500">
                                <option value="">Selecione uma categoria</option>
                            </select>
                            <div class="invalid-feedback hidden text-red-500 text-sm mt-1"></div>
                        </div>
                        
                        <!-- Priority -->
                        <div>
                            <label for="priority" class="block text-sm font-medium text-gray-700 mb-2">
                                Prioridade <span class="text-red-500">*</span>
                            </label>
                            <select id="priority" name="priority" required
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500">
                                <option value="">Selecione a prioridade</option>
                                <option value="low">Baixa</option>
                                <option value="medium">Média</option>
                                <option value="high">Alta</option>
                            </select>
                            <div class="invalid-feedback hidden text-red-500 text-sm mt-1"></div>
                        </div>
                        
                        <!-- Status -->
                        <div>
                            <label for="status" class="block text-sm font-medium text-gray-700 mb-2">
                                Status <span class="text-red-500">*</span>
                            </label>
                            <select id="status" name="status" required
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500">
                                <option value="pending">Pendente</option>
                                <option value="in_progress">Em Progresso</option>
                                <option value="completed">Concluída</option>
                            </select>
                            <div class="invalid-feedback hidden text-red-500 text-sm mt-1"></div>
                        </div>
                    </div>
                    
                    <!-- Due Date -->
                    <div>
                        <label for="due_date" class="block text-sm font-medium text-gray-700 mb-2">
                            Data de Vencimento
                        </label>
                        <input type="date" id="due_date" name="due_date"
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500">
                        <div class="invalid-feedback hidden text-red-500 text-sm mt-1"></div>
                    </div>
                    
                    <!-- Assign Users Section -->
                    <div class="border-t pt-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">
                            <i class="fas fa-users mr-2 text-indigo-500"></i>
                            Usuários Atribuídos
                        </h3>
                        
                        <div class="space-y-4">
                            <div id="users-list" class="space-y-2">
                                <!-- Users will be loaded here -->
                                <div id="loading-users" class="text-center py-4">
                                    <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-indigo-600 mx-auto mb-2"></div>
                                    <p class="text-sm text-gray-500">Carregando usuários...</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Form Actions -->
                    <div class="flex justify-between pt-6 border-t">
                        <div class="flex space-x-4">
                            <a href="/tasks" class="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors">
                                Cancelar
                            </a>
                        </div>
                        <div class="flex space-x-4">
                            <button type="button" id="reset-btn" class="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors">
                                <i class="fas fa-undo mr-2"></i>
                                Resetar
                            </button>
                            <button type="submit" class="px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors">
                                <i class="fas fa-save mr-2"></i>
                                Salvar Alterações
                            </button>
                        </div>
                    </div>
                </form>
            </div>
            
            <!-- Task History Card -->
            <div class="mt-8 bg-white rounded-lg shadow-md">
                <div class="p-6 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900">
                        <i class="fas fa-history mr-2 text-indigo-500"></i>
                        Histórico da Tarefa
                    </h3>
                </div>
                <div class="p-6">
                    <div id="task-history" class="space-y-4">
                        <!-- History will be loaded here -->
                        <div class="text-center py-8 text-gray-500">
                            <i class="fas fa-clock text-2xl mb-2"></i>
                            <p>Carregando histórico...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Success/Error Flash Messages -->
    <div id="flash-messages" class="fixed top-4 right-4 z-50"></div>

    <!-- Delete Confirmation Modal -->
    <div id="delete-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4">
        <div class="bg-white rounded-lg max-w-md w-full p-6">
            <div class="flex items-center space-x-3 mb-4">
                <div class="flex-shrink-0">
                    <i class="fas fa-exclamation-triangle text-red-500 text-2xl"></i>
                </div>
                <div>
                    <h3 class="text-lg font-semibold text-gray-900">Confirmar Exclusão</h3>
                    <p class="text-sm text-gray-500">Esta ação não pode ser desfeita</p>
                </div>
            </div>
            <p class="text-gray-700 mb-6">
                Tem certeza que deseja excluir esta tarefa? Todos os dados relacionados serão perdidos permanentemente.
            </p>
            <div class="flex justify-end space-x-4">
                <button id="cancel-delete" class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors">
                    Cancelar
                </button>
                <button id="confirm-delete" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
                    <i class="fas fa-trash mr-2"></i>
                    Excluir Tarefa
                </button>
            </div>
        </div>
    </div>

    <script>
        // Edit task form JavaScript
        let originalTaskData = {};
        let allUsers = [];
        let taskId = null;

        document.addEventListener('DOMContentLoaded', function() {
            // Get task ID from URL
            const urlParts = window.location.pathname.split('/');
            taskId = urlParts[urlParts.length - 2]; // Assuming URL like /tasks/123/edit
            
            if (!taskId) {
                showFlashMessage('ID da tarefa não encontrado', 'error');
                setTimeout(() => window.location.href = '/tasks', 2000);
                return;
            }
            
            loadTaskData();
            loadCategories();
            loadUsers();
            setupFormValidation();
            setupEventListeners();
        });

        function setupEventListeners() {
            document.getElementById('delete-task-btn').addEventListener('click', showDeleteModal);
            document.getElementById('cancel-delete').addEventListener('click', hideDeleteModal);
            document.getElementById('confirm-delete').addEventListener('click', deleteTask);
            document.getElementById('reset-btn').addEventListener('click', resetForm);
        }

        // Mock API request function
        async function apiRequest(endpoint, options = {}) {
            const baseUrl = '/api';
            
            try {
                const response = await fetch(baseUrl + endpoint, {
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || ''
                    },
                    ...options
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                return await response.json();
            } catch (error) {
                console.error('API request failed:', error);
                
                // Mock data for demonstration
                if (endpoint === `/tasks/${taskId}`) {
                    return {
                        id: taskId,
                        title: 'Implementar Sistema de Login',
                        description: 'Criar sistema completo de autenticação com validação e segurança',
                        category_id: 1,
                        priority: 'high',
                        status: 'in_progress',
                        due_date: '2024-01-20',
                        created_at: '2024-01-10T10:00:00Z',
                        assigned_users: [1, 2]
                    };
                } else if (endpoint === '/categories') {
                    return [
                        { id: 1, name: 'Desenvolvimento' },
                        { id: 2, name: 'Design' },
                        { id: 3, name: 'Marketing' },
                        { id: 4, name: 'Reuniões' },
                        { id: 5, name: 'Administrativo' }
                    ];
                } else if (endpoint === '/users') {
                    return [
                        { id: 1, name: 'João Silva', email: 'joao@example.com' },
                        { id: 2, name: 'Maria Santos', email: 'maria@example.com' },
                        { id: 3, name: 'Pedro Costa', email: 'pedro@example.com' },
                        { id: 4, name: 'Ana Lima', email: 'ana@example.com' }
                    ];
                } else if (endpoint === `/tasks/${taskId}/history`) {
                    return [
                        { 
                            id: 1, 
                            action: 'created', 
                            description: 'Tarefa criada', 
                            user_name: 'João Silva',
                            created_at: '2024-01-10T10:00:00Z' 
                        },
                        { 
                            id: 2, 
                            action: 'updated', 
                            description: 'Status alterado para "Em Progresso"', 
                            user_name: 'Maria Santos',
                            created_at: '2024-01-12T14:30:00Z' 
                        },
                        { 
                            id: 3, 
                            action: 'assigned', 
                            description: 'Usuário "Pedro Costa" atribuído à tarefa', 
                            user_name: 'João Silva',
                            created_at: '2024-01-13T09:15:00Z' 
                        }
                    ];
                }
                
                throw error;
            }
        }

        async function loadTaskData() {
            try {
                const task = await apiRequest(`/tasks/${taskId}`);
                originalTaskData = { ...task };
                
                // Fill form fields
                document.getElementById('task-id').value = task.id;
                document.getElementById('title').value = task.title || '';
                document.getElementById('description').value = task.description || '';
                document.getElementById('category_id').value = task.category_id || '';
                document.getElementById('priority').value = task.priority || '';
                document.getElementById('status').value = task.status || '';
                document.getElementById('due_date').value = task.due_date ? task.due_date.split('T')[0] : '';
                
                // Format and display created date
                if (task.created_at) {
                    const createdDate = new Date(task.created_at);
                    document.getElementById('created-date').textContent = createdDate.toLocaleDateString('pt-BR');
                }
                
                // Load task history
                loadTaskHistory();
                
            } catch (error) {
                console.error('Error loading task:', error);
                showFlashMessage('Erro ao carregar dados da tarefa', 'error');
            }
        }

        async function loadCategories() {
            try {
                const categories = await apiRequest('/categories');
                const categorySelect = document.getElementById('category_id');
                const currentValue = categorySelect.value;
                
                // Clear and rebuild options
                categorySelect.innerHTML = '<option value="">Selecione uma categoria</option>';
                
                categories.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category.id;
                    option.textContent = category.name;
                    categorySelect.appendChild(option);
                });
                
                // Restore selected value
                categorySelect.value = currentValue;
                
            } catch (error) {
                console.error('Error loading categories:', error);
                showFlashMessage('Erro ao carregar categorias', 'error');
            }
        }

        async function loadUsers() {
            try {
                const users = await apiRequest('/users');
                allUsers = users;
                
                const container = document.getElementById('users-list');
                const loadingElement = document.getElementById('loading-users');
                
                if (users.length === 0) {
                    loadingElement.innerHTML = '<p class="text-sm text-gray-500 text-center">Nenhum usuário encontrado</p>';
                    return;
                }
                
                const usersHTML = users.map(user => {
                    const isAssigned = originalTaskData.assigned_users && originalTaskData.assigned_users.includes(user.id);
                    return `
                        <div class="flex items-center space-x-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50">
                            <input type="checkbox" id="user-${user.id}" name="users" value="${user.id}"
                                   ${isAssigned ? 'checked' : ''}
                                   class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500">
                            <label for="user-${user.id}" class="flex-1 flex items-center space-x-3 cursor-pointer">
                                <div class="flex-shrink-0">
                                    <div class="h-8 w-8 bg-indigo-100 rounded-full flex items-center justify-center">
                                        <span class="text-indigo-600 font-semibold text-sm">
                                            ${user.name.charAt(0).toUpperCase()}
                                        </span>
                                    </div>
                                </div>
                                <div class="flex-1">
                                    <p class="text-sm font-medium text-gray-900">${user.name}</p>
                                    <p class="text-xs text-gray-500">${user.email}</p>
                                </div>
                            </label>
                        </div>
                    `;
                }).join('');
                
                container.innerHTML = usersHTML;
                loadingElement.style.display = 'none';
                
            } catch (error) {
                console.error('Error loading users:', error);
                document.getElementById('loading-users').innerHTML = 
                    '<p class="text-sm text-red-500 text-center">Erro ao carregar usuários</p>';
            }
        }

        async function loadTaskHistory() {
            try {
                const history = await apiRequest(`/tasks/${taskId}/history`);
                const container = document.getElementById('task-history');
                
                if (history.length === 0) {
                    container.innerHTML = `
                        <div class="text-center py-8 text-gray-500">
                            <i class="fas fa-clock text-2xl mb-2"></i>
                            <p>Nenhum histórico encontrado</p>
                        </div>
                    `;
                    return;
                }
                
                const historyHTML = history.map(item => `
                    <div class="flex items-start space-x-4">
                        <div class="flex-shrink-0">
                            <div class="h-8 w-8 bg-indigo-100 rounded-full flex items-center justify-center">
                                <i class="fas fa-${getHistoryIcon(item.action)} text-indigo-600 text-xs"></i>
                            </div>
                        </div>
                        <div class="flex-1">
                            <p class="text-sm font-medium text-gray-900">${item.description}</p>
                            <div class="flex items-center space-x-2 text-xs text-gray-500 mt-1">
                                <span>por ${item.user_name}</span>
                                <span>•</span>
                                <span>${formatDate(item.created_at)}</span>
                            </div>
                        </div>
                    </div>
                `).join('');
                
                container.innerHTML = historyHTML;
                
            } catch (error) {
                console.error('Error loading task history:', error);
                document.getElementById('task-history').innerHTML = `
                    <div class="text-center py-8 text-red-500">
                        <i class="fas fa-exclamation-triangle text-2xl mb-2"></i>
                        <p>Erro ao carregar histórico</p>
                    </div>
                `;
            }
        }

        function getHistoryIcon(action) {
            const icons = {
                'created': 'plus',
                'updated': 'edit',
                'assigned': 'user-plus',
                'status_changed': 'exchange-alt',
                'deleted': 'trash'
            };
            return icons[action] || 'clock';
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('pt-BR') + ' às ' + date.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
        }

        function setupFormValidation() {
            const form = document.getElementById('edit-task-form');
            const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');
            
            inputs.forEach(input => {
                input.addEventListener('blur', () => validateField(input));
                input.addEventListener('input', () => clearFieldError(input));
            });
            
            form.addEventListener('submit', handleFormSubmit);
        }

        function validateField(field) {
            const value = field.value.trim();
            const fieldName = field.name;
            let errorMessage = '';
            
            if (field.hasAttribute('required') && !value) {
                errorMessage = 'Este campo é obrigatório';
            }
            
            switch (fieldName) {
                case 'title':
                    if (value && value.length < 3) {
                        errorMessage = 'O título deve ter pelo menos 3 caracteres';
                    } else if (value && value.length > 100) {
                        errorMessage = 'O título deve ter no máximo 100 caracteres';
                    }
                    break;
                    
                case 'description':
                    if (value && value.length > 500) {
                        errorMessage = 'A descrição deve ter no máximo 500 caracteres';
                    }
                    break;
                    
                case 'due_date':
                    if (value) {
                        const selectedDate = new Date(value);
                        const today = new Date();
                        today.setHours(0, 0, 0, 0);
                        
                        if (selectedDate < today) {
                            errorMessage = 'A data de vencimento não pode ser anterior a hoje';
                        }
                    }
                    break;
            }
            
            showFieldError(field, errorMessage);
            return !errorMessage;
        }

        function showFieldError(field, message) {
            const feedback = field.parentNode.querySelector('.invalid-feedback');
            
            if (message) {
                field.classList.add('border-red-500', 'focus:border-red-500', 'focus:ring-red-500');
                field.classList.remove('border-gray-300', 'focus:border-indigo-500', 'focus:ring-indigo-500');
                feedback.textContent = message;
                feedback.classList.remove('hidden');
            } else {
                clearFieldError(field);
            }
        }

        function clearFieldError(field) {
            const feedback = field.parentNode.querySelector('.invalid-feedback');
            field.classList.remove('border-red-500', 'focus:border-red-500', 'focus:ring-red-500');
            field.classList.add('border-gray-300', 'focus:border-indigo-500', 'focus:ring-indigo-500');
            feedback.classList.add('hidden');
        }

        async function handleFormSubmit(e) {
            e.preventDefault();
            
            const form = e.target;
            const submitButton = form.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;
            
            // Validate all fields
            const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');
            let isValid = true;
            
            inputs.forEach(input => {
                if (!validateField(input)) {
                    isValid = false;
                }
            });
            
            if (!isValid) {
                showFlashMessage('Por favor, corrija os erros no formulário', 'error');
                return;
            }
            
            // Show loading state
            submitButton.disabled = true;
            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Salvando...';
            
            try {
                const formData = new FormData(form);
                const taskData = {
                    title: formData.get('title'),
                    description: formData.get('description'),
                    category_id: formData.get('category_id') || null,
                    priority: formData.get('priority'),
                    status: formData.get('status'),
                    due_date: formData.get('due_date') || null,
                    users: Array.from(form.querySelectorAll('input[name="users"]:checked')).map(cb => parseInt(cb.value))
                };
                
                await apiRequest(`/tasks/${taskId}`, {
                    method: 'PUT',
                    body: JSON.stringify(taskData)
                });
                
                showFlashMessage('Tarefa atualizada com sucesso!', 'success');
                
                // Reload task data and history
                setTimeout(() => {
                    loadTaskData();
                }, 1000);
                
            } catch (error) {
                console.error('Error updating task:', error);
                showFlashMessage('Erro ao atualizar tarefa. Tente novamente.', 'error');
            } finally {
                submitButton.disabled = false;
                submitButton.innerHTML = originalButtonText;
            }
        }

        function resetForm() {
            // Reset form to original values
            document.getElementById('title').value = originalTaskData.title || '';
            document.getElementById('description').value = originalTaskData.description || '';
            document.getElementById('category_id').value = originalTaskData.category_id || '';
            document.getElementById('priority').value = originalTaskData.priority || '';
            document.getElementById('status').value = originalTaskData.status || '';
            document.getElementById('due_date').value = originalTaskData.due_date ? originalTaskData.due_date.split('T')[0] : '';
            
            // Reset user assignments
            const userCheckboxes = document.querySelectorAll('input[name="users"]');
            userCheckboxes.forEach(checkbox => {
                const userId = parseInt(checkbox.value);
                checkbox.checked = originalTaskData.assigned_users && originalTaskData.assigned_users.includes(userId);
            });
            
            // Clear all field errors
            const inputs = document.querySelectorAll('input, select, textarea');
            inputs.forEach(clearFieldError);
            
            showFlashMessage('Formulário resetado', 'info');
        }

        function showDeleteModal() {
            document.getElementById('delete-modal').classList.remove('hidden');
        }

        function hideDeleteModal() {
            document.getElementById('delete-modal').classList.add('hidden');
        }

        async function deleteTask() {
            const deleteButton = document.getElementById('confirm-delete');
            const originalText = deleteButton.innerHTML;
            
            deleteButton.disabled = true;
            deleteButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Excluindo...';
            
            try {
                await apiRequest(`/tasks/${taskId}`, {
                    method: 'DELETE'
                });
                
                showFlashMessage('Tarefa excluída com sucesso!', 'success');
                hideDeleteModal();
                
                setTimeout(() => {
                    window.location.href = '/tasks';
                }, 1500);
                
            } catch (error) {
                console.error('Error deleting task:', error);
                showFlashMessage('Erro ao excluir tarefa. Tente novamente.', 'error');
                
                deleteButton.disabled = false;
                deleteButton.innerHTML = originalText;
            }
        }
function showFlashMessage(message, type = 'info') {
            const container = document.getElementById('flash-messages');
            
            const colors = {
                success: 'bg-green-500',
                error: 'bg-red-500',
                warning: 'bg-yellow-500',
                info: 'bg-blue-500'
            };
            
            const icons = {
                success: 'check-circle',
                error: 'exclamation-circle',
                warning: 'exclamation-triangle',
                info: 'info-circle'
            };
            
            const messageId = 'flash-' + Date.now();
            const messageElement = document.createElement('div');
            messageElement.id = messageId;
            messageElement.className = `${colors[type]} text-white px-6 py-4 rounded-lg shadow-lg mb-4 flex items-center space-x-3 transform translate-x-full transition-transform duration-300`;
            
            messageElement.innerHTML = `
                <i class="fas fa-${icons[type]} text-lg"></i>
                <span class="flex-1">${message}</span>
                <button onclick="removeFlashMessage('${messageId}')" class="text-white hover:text-gray-200 transition-colors">
                    <i class="fas fa-times"></i>
                </button>
            `;
            
            container.appendChild(messageElement);
            
            // Animate in
            setTimeout(() => {
                messageElement.classList.remove('translate-x-full');
            }, 100);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                removeFlashMessage(messageId);
            }, 5000);
        }
        
        function removeFlashMessage(messageId) {
            const messageElement = document.getElementById(messageId);
            if (messageElement) {
                messageElement.classList.add('translate-x-full');
                setTimeout(() => {
                    messageElement.remove();
                }, 300);
            }
        }
        
        // Utility function to check if form has changes
        function hasFormChanges() {
            const currentData = {
                title: document.getElementById('title').value,
                description: document.getElementById('description').value,
                category_id: document.getElementById('category_id').value,
                priority: document.getElementById('priority').value,
                status: document.getElementById('status').value,
                due_date: document.getElementById('due_date').value,
                users: Array.from(document.querySelectorAll('input[name="users"]:checked')).map(cb => parseInt(cb.value))
            };
            
            const originalData = {
                title: originalTaskData.title || '',
                description: originalTaskData.description || '',
                category_id: originalTaskData.category_id ? originalTaskData.category_id.toString() : '',
                priority: originalTaskData.priority || '',
                status: originalTaskData.status || '',
                due_date: originalTaskData.due_date ? originalTaskData.due_date.split('T')[0] : '',
                users: originalTaskData.assigned_users || []
            };
            
            return JSON.stringify(currentData) !== JSON.stringify(originalData);
        }
        
        // Warn user before leaving if there are unsaved changes
        window.addEventListener('beforeunload', function(e) {
            if (hasFormChanges()) {
                e.preventDefault();
                e.returnValue = 'Você tem alterações não salvas. Deseja realmente sair?';
                return e.returnValue;
            }
        });
        
        // Add keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            // Ctrl+S to save
            if (e.ctrlKey && e.key === 's') {
                e.preventDefault();
                document.getElementById('edit-task-form').dispatchEvent(new Event('submit'));
            }
            
            // Escape to close modal
            if (e.key === 'Escape') {
                const modal = document.getElementById('delete-modal');
                if (!modal.classList.contains('hidden')) {
                    hideDeleteModal();
                }
            }
        });
        
        // Auto-save draft functionality (optional)
        let autoSaveTimer;
        const AUTOSAVE_DELAY = 30000; // 30 seconds
        
        function startAutoSave() {
            clearTimeout(autoSaveTimer);
            autoSaveTimer = setTimeout(() => {
                if (hasFormChanges()) {
                    saveDraft();
                }
                startAutoSave(); // Restart the timer
            }, AUTOSAVE_DELAY);
        }
        
        function saveDraft() {
            const formData = new FormData(document.getElementById('edit-task-form'));
            const draftData = {
                title: formData.get('title'),
                description: formData.get('description'),
                category_id: formData.get('category_id'),
                priority: formData.get('priority'),
                status: formData.get('status'),
                due_date: formData.get('due_date'),
                users: Array.from(document.querySelectorAll('input[name="users"]:checked')).map(cb => parseInt(cb.value)),
                timestamp: new Date().toISOString()
            };
            
            // In a real application, this would save to localStorage or send to server
            console.log('Draft saved:', draftData);
            
            // Show subtle notification
            const existingDraftNotice = document.getElementById('draft-notice');
            if (existingDraftNotice) {
                existingDraftNotice.remove();
            }
            
            const draftNotice = document.createElement('div');
            draftNotice.id = 'draft-notice';
            draftNotice.className = 'fixed bottom-4 left-4 bg-gray-700 text-white px-4 py-2 rounded-lg text-sm opacity-75';
            draftNotice.innerHTML = '<i class="fas fa-save mr-2"></i>Rascunho salvo automaticamente';
            document.body.appendChild(draftNotice);
            
            setTimeout(() => {
                if (draftNotice) {
                    draftNotice.remove();
                }
            }, 3000);
        }
        
        // Initialize auto-save when form is modified
        document.getElementById('edit-task-form').addEventListener('input', function() {
            startAutoSave();
        });
        
        // Character counters for text fields
        function setupCharacterCounters() {
            const titleField = document.getElementById('title');
            const descriptionField = document.getElementById('description');
            
            addCharacterCounter(titleField, 100);
            addCharacterCounter(descriptionField, 500);
        }
        
        function addCharacterCounter(field, maxLength) {
            const counter = document.createElement('div');
            counter.className = 'text-xs text-gray-500 mt-1 text-right';
            counter.id = field.id + '-counter';
            field.parentNode.appendChild(counter);
            
            function updateCounter() {
                const currentLength = field.value.length;
                counter.textContent = `${currentLength}/${maxLength}`;
                
                if (currentLength > maxLength * 0.9) {
                    counter.classList.add('text-yellow-600');
                    counter.classList.remove('text-gray-500', 'text-red-600');
                } else if (currentLength > maxLength) {
                    counter.classList.add('text-red-600');
                    counter.classList.remove('text-gray-500', 'text-yellow-600');
                } else {
                    counter.classList.add('text-gray-500');
                    counter.classList.remove('text-yellow-600', 'text-red-600');
                }
            }
            
            field.addEventListener('input', updateCounter);
            updateCounter(); // Initial count
        }
        
        // Initialize character counters after DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(setupCharacterCounters, 100);
        });
        
        // Add smooth scroll to validation errors
        function scrollToFirstError() {
            const firstError = document.querySelector('.border-red-500');
            if (firstError) {
                firstError.scrollIntoView({ 
                    behavior: 'smooth', 
                    block: 'center' 
                });
                firstError.focus();
            }
        }
        
        // Enhanced form validation with real-time feedback
        function enhanceValidation() {
            const form = document.getElementById('edit-task-form');
            const submitButton = form.querySelector('button[type="submit"]');
            
            function checkFormValidity() {
                const requiredFields = form.querySelectorAll('[required]');
                let isValid = true;
                
                requiredFields.forEach(field => {
                    if (!field.value.trim()) {
                        isValid = false;
                    }
                });
                
                submitButton.disabled = !isValid;
                submitButton.classList.toggle('opacity-50', !isValid);
                submitButton.classList.toggle('cursor-not-allowed', !isValid);
            }
            
            // Check validity on form input
            form.addEventListener('input', checkFormValidity);
            form.addEventListener('change', checkFormValidity);
            
            // Initial check
            setTimeout(checkFormValidity, 500);
        }
        
        // Initialize enhanced validation
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(enhanceValidation, 200);
        });
    </script>
</body>
</html>