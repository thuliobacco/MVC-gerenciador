<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nova Tarefa</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body class="bg-gray-50 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <div class="mb-8">
            <div class="flex items-center space-x-4">
                <a href="/tasks" class="text-indigo-600 hover:text-indigo-800 transition-colors">
                    <i class="fas fa-arrow-left text-xl"></i>
                </a>
                <div>
                    <h1 class="text-3xl font-bold text-gray-900">Nova Tarefa</h1>
                    <p class="text-gray-600 mt-1">Preencha os dados para criar uma nova tarefa</p>
                </div>
            </div>
        </div>

        <!-- Create Task Form -->
        <div class="max-w-4xl mx-auto">
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <div class="p-6 border-b border-gray-200">
                    <h2 class="text-xl font-semibold text-gray-900">
                        <i class="fas fa-plus-circle mr-2 text-indigo-500"></i>
                        Informações da Tarefa
                    </h2>
                </div>
                
                <form id="create-task-form" class="p-6 space-y-6">
                    <!-- Title -->
                    <div>
                        <label for="title" class="block text-sm font-medium text-gray-700 mb-2">
                            Título da Tarefa <span class="text-red-500">*</span>
                        </label>
                        <input type="text" id="title" name="title" required
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
                               placeholder="Digite o título da tarefa">
                        <div class="invalid-feedback hidden text-red-500 text-sm mt-1"></div>
                    </div>
                    
                    <!-- Description -->
                    <div>
                        <label for="description" class="block text-sm font-medium text-gray-700 mb-2">
                            Descrição
                        </label>
                        <textarea id="description" name="description" rows="4"
                                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
                                  placeholder="Descreva os detalhes da tarefa"></textarea>
                        <div class="invalid-feedback hidden text-red-500 text-sm mt-1"></div>
                    </div>
                    
                    <!-- Row with Category, Priority, and Status -->
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <!-- Category -->
                        <div>
                            <label for="category_id" class="block text-sm font-medium text-gray-700 mb-2">
                                Categoria
                            </label>
                            <select id="category_id" name="category_id"
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500">
                                <option value="">Selecione uma categoria</option>
                            </select>
                            <div class="invalid-feedback hidden text-red-500 text-sm mt-1"></div>
                        </div>
                        
                        <!-- Priority -->
                        <div>
                            <label for="priority" class="block text-sm font-medium text-gray-700 mb-2">
                                Prioridade <span class="text-red-500">*</span>
                            </label>
                            <select id="priority" name="priority" required
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500">
                                <option value="">Selecione a prioridade</option>
                                <option value="low">Baixa</option>
                                <option value="medium" selected>Média</option>
                                <option value="high">Alta</option>
                            </select>
                            <div class="invalid-feedback hidden text-red-500 text-sm mt-1"></div>
                        </div>
                        
                        <!-- Status -->
                        <div>
                            <label for="status" class="block text-sm font-medium text-gray-700 mb-2">
                                Status <span class="text-red-500">*</span>
                            </label>
                            <select id="status" name="status" required
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500">
                                <option value="pending" selected>Pendente</option>
                                <option value="in_progress">Em Progresso</option>
                                <option value="completed">Concluída</option>
                            </select>
                            <div class="invalid-feedback hidden text-red-500 text-sm mt-1"></div>
                        </div>
                    </div>
                    
                    <!-- Due Date -->
                    <div>
                        <label for="due_date" class="block text-sm font-medium text-gray-700 mb-2">
                            Data de Vencimento
                        </label>
                        <input type="date" id="due_date" name="due_date"
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500">
                        <div class="invalid-feedback hidden text-red-500 text-sm mt-1"></div>
                    </div>
                    
                    <!-- Assign Users Section -->
                    <div class="border-t pt-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">
                            <i class="fas fa-users mr-2 text-indigo-500"></i>
                            Atribuir Usuários (opcional)
                        </h3>
                        
                        <div class="space-y-4">
                            <div id="users-list" class="space-y-2">
                                <!-- Users will be loaded here -->
                                <div id="loading-users" class="text-center py-4">
                                    <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-indigo-600 mx-auto mb-2"></div>
                                    <p class="text-sm text-gray-500">Carregando usuários...</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Form Actions -->
                    <div class="flex justify-end space-x-4 pt-6 border-t">
                        <a href="/tasks" class="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors">
                            Cancelar
                        </a>
                        <button type="submit" class="px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors">
                            <i class="fas fa-save mr-2"></i>
                            Criar Tarefa
                        </button>
                    </div>
                </form>
            </div>
            
            <!-- Quick Actions Card -->
            <div class="mt-8 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-lg shadow-md text-white p-6">
                <h3 class="text-lg font-semibold mb-4">
                    <i class="fas fa-lightbulb mr-2"></i>
                    Dicas para Criar Tarefas
                </h3>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                    <div class="flex items-start space-x-2">
                        <i class="fas fa-check-circle mt-1"></i>
                        <span>Use títulos claros e descritivos</span>
                    </div>
                    <div class="flex items-start space-x-2">
                        <i class="fas fa-check-circle mt-1"></i>
                        <span>Defina prioridades baseadas na urgência</span>
                    </div>
                    <div class="flex items-start space-x-2">
                        <i class="fas fa-check-circle mt-1"></i>
                        <span>Adicione detalhes na descrição</span>
                    </div>
                    <div class="flex items-start space-x-2">
                        <i class="fas fa-check-circle mt-1"></i>
                        <span>Defina prazos realistas</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Success/Error Flash Messages -->
    <div id="flash-messages" class="fixed top-4 right-4 z-50"></div>

    <script>
        // Create task form JavaScript
        let allUsers = [];

        document.addEventListener('DOMContentLoaded', function() {
            loadCategories();
            loadUsers();
            setupFormValidation();
            setMinDate();
        });

        function setMinDate() {
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('due_date').setAttribute('min', today);
        }

        // Mock API request function (replace with your actual API implementation)
        async function apiRequest(endpoint, options = {}) {
            // Simulating API calls for demonstration
            const baseUrl = '/api';
            
            try {
                const response = await fetch(baseUrl + endpoint, {
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || ''
                    },
                    ...options
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                return await response.json();
            } catch (error) {
                console.error('API request failed:', error);
                
                // Mock data for demonstration
                if (endpoint === '/categories') {
                    return [
                        { id: 1, name: 'Desenvolvimento' },
                        { id: 2, name: 'Design' },
                        { id: 3, name: 'Marketing' },
                        { id: 4, name: 'Reuniões' },
                        { id: 5, name: 'Administrativo' }
                    ];
                } else if (endpoint === '/users') {
                    return [
                        { id: 1, name: 'João Silva', email: 'joao@example.com' },
                        { id: 2, name: 'Maria Santos', email: 'maria@example.com' },
                        { id: 3, name: 'Pedro Costa', email: 'pedro@example.com' },
                        { id: 4, name: 'Ana Lima', email: 'ana@example.com' }
                    ];
                }
                
                throw error;
            }
        }

        async function loadCategories() {
            try {
                const categories = await apiRequest('/categories');
                const categorySelect = document.getElementById('category_id');
                
                // Clear existing options except the first one
                categorySelect.innerHTML = '<option value="">Selecione uma categoria</option>';
                
                categories.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category.id;
                    option.textContent = category.name;
                    categorySelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error loading categories:', error);
                showFlashMessage('Erro ao carregar categorias', 'error');
            }
        }

        async function loadUsers() {
            try {
                const users = await apiRequest('/users');
                allUsers = users;
                
                const container = document.getElementById('users-list');
                const loadingElement = document.getElementById('loading-users');
                
                if (users.length === 0) {
                    loadingElement.innerHTML = '<p class="text-sm text-gray-500 text-center">Nenhum usuário encontrado</p>';
                    return;
                }
                
                const usersHTML = users.map(user => `
                    <div class="flex items-center space-x-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50">
                        <input type="checkbox" id="user-${user.id}" name="users" value="${user.id}"
                               class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500">
                        <label for="user-${user.id}" class="flex-1 flex items-center space-x-3 cursor-pointer">
                            <div class="flex-shrink-0">
                                <div class="h-8 w-8 bg-indigo-100 rounded-full flex items-center justify-center">
                                    <span class="text-indigo-600 font-semibold text-sm">
                                        ${user.name.charAt(0).toUpperCase()}
                                    </span>
                                </div>
                            </div>
                            <div class="flex-1">
                                <p class="text-sm font-medium text-gray-900">${user.name}</p>
                                <p class="text-xs text-gray-500">${user.email}</p>
                            </div>
                        </label>
                    </div>
                `).join('');
                
                container.innerHTML = usersHTML;
                loadingElement.style.display = 'none';
            } catch (error) {
                console.error('Error loading users:', error);
                document.getElementById('loading-users').innerHTML = 
                    '<p class="text-sm text-red-500 text-center">Erro ao carregar usuários</p>';
            }
        }

        function setupFormValidation() {
            const form = document.getElementById('create-task-form');
            const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');
            
            // Real-time validation
            inputs.forEach(input => {
                input.addEventListener('blur', () => validateField(input));
                input.addEventListener('input', () => clearFieldError(input));
            });
            
            // Form submission
            form.addEventListener('submit', handleFormSubmit);
        }

        function validateField(field) {
            const value = field.value.trim();
            const fieldName = field.name;
            let errorMessage = '';
            
            // Required field validation
            if (field.hasAttribute('required') && !value) {
                errorMessage = 'Este campo é obrigatório';
            }
            
            // Specific field validations
            switch (fieldName) {
                case 'title':
                    if (value && value.length < 3) {
                        errorMessage = 'O título deve ter pelo menos 3 caracteres';
                    } else if (value && value.length > 100) {
                        errorMessage = 'O título deve ter no máximo 100 caracteres';
                    }
                    break;
                    
                case 'description':
                    if (value && value.length > 500) {
                        errorMessage = 'A descrição deve ter no máximo 500 caracteres';
                    }
                    break;
                    
                case 'due_date':
                    if (value) {
                        const selectedDate = new Date(value);
                        const today = new Date();
                        today.setHours(0, 0, 0, 0);
                        
                        if (selectedDate < today) {
                            errorMessage = 'A data de vencimento não pode ser anterior a hoje';
                        }
                    }
                    break;
            }
            
            showFieldError(field, errorMessage);
            return !errorMessage;
        }

        function showFieldError(field, message) {
            const feedback = field.parentNode.querySelector('.invalid-feedback');
            
            if (message) {
                field.classList.add('border-red-500', 'focus:border-red-500', 'focus:ring-red-500');
                field.classList.remove('border-gray-300', 'focus:border-indigo-500', 'focus:ring-indigo-500');
                feedback.textContent = message;
                feedback.classList.remove('hidden');
            } else {
                clearFieldError(field);
            }
        }

        function clearFieldError(field) {
            const feedback = field.parentNode.querySelector('.invalid-feedback');
            field.classList.remove('border-red-500', 'focus:border-red-500', 'focus:ring-red-500');
            field.classList.add('border-gray-300', 'focus:border-indigo-500', 'focus:ring-indigo-500');
            feedback.classList.add('hidden');
        }

        async function handleFormSubmit(e) {
            e.preventDefault();
            
            const form = e.target;
            const submitButton = form.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;
            
            // Validate all fields
            const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');
            let isValid = true;
            
            inputs.forEach(input => {
                if (!validateField(input)) {
                    isValid = false;
                }
            });
            
            if (!isValid) {
                showFlashMessage('Por favor, corrija os erros no formulário', 'error');
                return;
            }
            
            // Show loading state
            submitButton.disabled = true;
            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Criando...';
            
            try {
                // Collect form data
                const formData = new FormData(form);
                const taskData = {
                    title: formData.get('title'),
                    description: formData.get('description'),
                    category_id: formData.get('category_id') || null,
                    priority: formData.get('priority'),
                    status: formData.get('status'),
                    due_date: formData.get('due_date') || null,
                    users: Array.from(form.querySelectorAll('input[name="users"]:checked')).map(cb => parseInt(cb.value))
                };
                
                // Submit to API
                const response = await apiRequest('/tasks', {
                    method: 'POST',
                    body: JSON.stringify(taskData)
                });
                
                showFlashMessage('Tarefa criada com sucesso!', 'success');
                
                // Redirect after successful creation
                setTimeout(() => {
                    window.location.href = '/tasks';
                }, 1500);
                
            } catch (error) {
                console.error('Error creating task:', error);
                showFlashMessage('Erro ao criar tarefa. Tente novamente.', 'error');
                
                // Reset button state
                submitButton.disabled = false;
                submitButton.innerHTML = originalButtonText;
            }
        }

        function showFlashMessage(message, type = 'info') {
            const container = document.getElementById('flash-messages');
            const messageId = 'flash-' + Date.now();
            
            const bgColor = type === 'success' ? 'bg-green-500' : 
                           type === 'error' ? 'bg-red-500' : 
                           type === 'warning' ? 'bg-yellow-500' : 'bg-blue-500';
            
            const icon = type === 'success' ? 'fa-check-circle' : 
                        type === 'error' ? 'fa-exclamation-circle' : 
                        type === 'warning' ? 'fa-exclamation-triangle' : 'fa-info-circle';
            
            const messageElement = document.createElement('div');
            messageElement.id = messageId;
            messageElement.className = `${bgColor} text-white px-6 py-4 rounded-lg shadow-lg mb-4 flex items-center space-x-3 transform translate-x-full transition-transform duration-300`;
            messageElement.innerHTML = `
                <i class="fas ${icon}"></i>
                <span>${message}</span>
                <button onclick="removeFlashMessage('${messageId}')" class="ml-auto text-white hover:text-gray-200">
                    <i class="fas fa-times"></i>
                </button>
            `;
            
            container.appendChild(messageElement);
            
            // Animate in
            setTimeout(() => {
                messageElement.classList.remove('translate-x-full');
            }, 100);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                removeFlashMessage(messageId);
            }, 5000);
        }

        function removeFlashMessage(messageId) {
            const messageElement = document.getElementById(messageId);
            if (messageElement) {
                messageElement.classList.add('translate-x-full');
                setTimeout(() => {
                    messageElement.remove();
                }, 300);
            }
        }
    </script>
</body>
</html>